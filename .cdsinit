;;                        -*-Lisp-*-
;;
;; NCSU CDK Copyright (C) 2006 North Carolina State University
;;

(let 
    ((LOCAL_CDK_DIR (getShellEnvVar "CDK_DIR")))
  (if LOCAL_CDK_DIR
      (if (not (boundp 'NCSU_CDK_LOADED))
	  (let ()   ; CDK needs to be loaded, so load it.

	    (setq NCSU_CDK_DIR LOCAL_CDK_DIR)
	    (procedure (prependNCSUCDKInstallPath dir)
		       (strcat NCSU_CDK_DIR "/" dir))
	    
	    (printf "Loading NCSU CDK 1.5.1 customizations...\n")
	    (setq NCSU_newLayoutMenuLabels t)
	    (putpropq (hiGetCIWindow) 96 "maxLayerPoolSize")
            (envSetVal "graphic" "drfPath" 'string
		       (strcat NCSU_CDK_DIR "/cdssetup/display.drf"))
	    
	    (if (isFile (prependNCSUCDKInstallPath "cdssetup/cdsenv"))
		(envLoadVals 
		 ?envFile (prependNCSUCDKInstallPath "cdssetup/cdsenv")
		 ?tool "ALL"))

	    (if (isFile "~/.cdsenv")
		(envLoadVals 
		 ?envFile "~/.cdsenv"
		 ?tool "ALL"))

	    (let
		((configFileList (list  ; "aaConfig.il" 
					; "dmConfig.il" 
	     				; "dciConfig.il"
					; "metConfig.il"
					; "sysConfig.il" 
					; "uiConfig.il" 
					; "leConfig.il" 
;				  "schConfig.il"
				  "streamIn.il"                   
				  ))
		 (path (strcat ". ~ "
			       (prependNCSUCDKInstallPath "skill/config_files")))
		 (saveSkillPath (getSkillPath))
		 file )
	      (setSkillPath path)
	      (foreach file configFileList
		       (if (isFile file)
			   (loadi file)))
	      (setSkillPath saveSkillPath))

	    (let
		((bindKeyFileList (list   
				   "common_bindkeys.il"                
				   ))
		 (path (strcat ". ~ "
			       (prependNCSUCDKInstallPath "cdssetup")))
		 (saveSkillPath (getSkillPath))
		 file )
	      (setSkillPath path)
	      (foreach file bindKeyFileList
		       (if (isFile file)
			   (loadi file)))
	      (setSkillPath saveSkillPath))
	    
	    (sstatus writeProtect nil)
	    
	    (let ((skillPathElements
		   (list "." "~"
			 (prependNCSUCDKInstallPath "skill")
			 (prependNCSUCDKInstallPath "skill/cdf")
			 (prependNCSUCDKInstallPath "skill/menus")
			 (prependNCSUCDKInstallPath "skill/menus/artist")
			 (prependNCSUCDKInstallPath "skill/menus/ciw")
			 (prependNCSUCDKInstallPath "skill/menus/virtuoso")
			 (prependNCSUCDKInstallPath "skill/misc")
			 (prependNCSUCDKInstallPath "skill/pcells")
			 (prependNCSUCDKInstallPath "techfile")))
		  sPE)

	      (foreach sPE skillPathElements
		       (setSkillPath (cons sPE (getSkillPath)))))
	    
;	    (if (isCallable 'awvSetOptionValue)
;		(let ()
;		  (awvSetOptionValue  "hcDisplay" "psb" )
;		  (awvSetOptionValue  "hcTmpDir"  "/tmp" )))
	    
	    (if  (not (boundp 'NCSU_skillAlreadyLoaded))
		(let ()
		  (setq NCSU_skillAlreadyLoaded t)
		  (printf "Loading NCSU SKILL routines...\n")
		  (load (prependNCSUCDKInstallPath "skill/loadSkill.il"))))
	    	    
;	    (asiSetEnvOptionVal  
;	     (asiGetTool 'spectreS) 
;	     'modelPath (strcat NCSU_CDK_DIR "/models/spectre/nom/"))
;	    (asiSetEnvOptionVal  
;	     (asiGetTool 'hspiceS) 
;	     'modelPath (strcat NCSU_CDK_DIR "/models/hspice/public/"))
	    (envSetVal "graphic" "drfPath"  'string
		       (strcat NCSU_CDK_DIR "/cdssetup/display.drf"))

	    (setq lePlotTemplate 
		  (prependNCSUCDKInstallPath "cdssetup/layoutPlotTemplate"))
	    (setq schPlotTemplate
		  (prependNCSUCDKInstallPath "cdssetup/schPlotTemplate" ))
	    (unless (getShellEnvVar "SKIP_CDSLIB_MANAGER")
	      (ddsOpenLibManager))
	    (printf "Done loading NCSU_CDK customizations.\n")
	    )
	(printf "NCSU CDK already loaded.\n")
	)

    ; you get to this let if NCSU_CDK_DIR is nil
    (let ()
      (printf "Environment variable CDK_DIR must be defined to use\n")
      (printf "the NCSU CDK.  It is not defined in the calling environment\n")
      (printf "so the NCSU customizations will not be performed!\n"))))

defun(ABbnNetlistProc (inst)

    let((formatter netlister bulk sigs)

        ;----------------------------------------------------------------

        ; Get hold of the formatter and netlister objects

        ;----------------------------------------------------------------

        formatter=nlGetFormatter(inst)

        netlister=nlGetNetlister(formatter)

 

        nlPrintInstComments(formatter inst)

        nlPrintIndentString(netlister)

        nlPrintInstName(formatter inst)

        ;----------------------------------------------------------------

        ; Print the standard signals. Can't use nlPrintInstSignals

        ; because the parentheses would be around the terminals in

        ; the termOrder, and not include the bulk node

        ;----------------------------------------------------------------

        sigs=nlGetSignalList(inst)

        nlPrintString(netlister " (" car(sigs))

        foreach(sig cdr(sigs)

            nlPrintString(netlister " " sig)

        ) ; foreach

        ;----------------------------------------------------------------

        ; Get the bn parameter and output that as the connection, if

        ; it is set

        ;----------------------------------------------------------------

        bulk=nlGetParamStringValue(inst "bn")

        when(member(bulk '("D" "G" "S"))

            bulk=nlGetTerminalSignalName(inst bulk)

            )

        when(bulk

            nlPrintString(netlister " " bulk)

            )

        ;----------------------------------------------------------------

        ; Write out the close parenthesis, now that the bulk is written

        ;----------------------------------------------------------------

        nlPrintString(netlister ")")

 

        nlPrintModelName(formatter inst)

        nlPrintInstParameters(formatter inst)

        )

)

envSetVal("asimenv.startup" "simulator" 'string "spectre")

schSRCPackagedChecks = list(
    list("Normal"
        list("floatingNets"      "warning")
        list("floatingInput"     "warning")
        list("floatingOutput"    "ignored")
        list("floatingIO"        "warning")
        list("floatingSwitch"    "warning")
        list("shortedOutputs"    "warning")
        list("unconnectedWires"  "ignored")
        list("solderOnCrossover" "ignored")
        list("instOverlap"       "ignored")
        list("instOverlapValue"  0)
        list("maxLabelOffset"    "ignored")
        list("maxLabelOffsetUU"  0.0)
        list("nameCollision"     "warning")
        list("verilogSyntax"     "ignored")
        list("VHDLSyntax"        "ignored")
        list("instNameSyntax"    "ignored")
        list("termNameSyntax"    "ignored")
        list("netNameSyntax"     "ignored")
    )
    list("Logical Only"
        list("floatingNets"      "warning")
        list("floatingInput"     "warning")
        list("floatingOutput"    "ignored")
        list("floatingIO"        "warning")
        list("floatingSwitch"    "warning")
        list("shortedOutputs"    "warning")
        list("unconnectedWires"  "ignored")
        list("solderOnCrossover" "ignored")
        list("instOverlap"       "ignored")
        list("maxLabelOffset"    "ignored")
        list("nameCollision"     "ignored")
        list("verilogSyntax"     "ignored")
        list("VHDLSyntax"        "ignored")
        list("instNameSyntax"    "ignored")
        list("termNameSyntax"    "ignored")
        list("netNameSyntax"     "ignored")
    )
    list("Physical Only"
        list("floatingNets"      "ignored")
        list("floatingInput"     "ignored")
        list("floatingOutput"    "ignored")
        list("floatingIO"        "ignored")
        list("floatingSwitch"    "ignored")
        list("shortedOutputs"    "ignored")
        list("unconnectedWires"  "warning")
        list("solderOnCrossover" "warning")
        list("instOverlap"       "ignored")
        list("instOverlapValue"  0)
        list("maxLabelOffset"    "ignored")
        list("maxLabelOffsetUU"  0.0)
        list("nameCollision"     "ignored")
        list("verilogSyntax"     "ignored")
        list("VHDLSyntax"        "ignored")
        list("verilogSyntax"     "ignored")
        list("instNameSyntax"    "ignored")
        list("termNameSyntax"    "ignored")
        list("netNameSyntax"     "ignored")
    )
    list("VHDL"
        list("nameCollision"     "warning")
        list("verilogSyntax"     "ignored")
        list("VHDLSyntax"        "warning")
    )
    list("Verilog"
        list("nameCollision"     "warning")
        list("verilogSyntax"     "warning")
        list("VHDLSyntax"        "ignored")
    )
)
